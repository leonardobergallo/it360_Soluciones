generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum Role {
  ADMIN
  TECNICO
  USER
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  phone     String?
  company   String?
  address   String?
  city      String?
  province  String?
  postalCode String?
  resetToken String?
  resetTokenExpiry DateTime?
  sales     Sale[]
  cart      Cart?
  paymentPreferences PaymentPreference[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  price       Float
  active      Boolean  @default(true)
  order       Int      @default(0)
  sales       Sale[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  price       Float
  basePrice   Float?   // Precio base sin markup
  markup      Float?   // Porcentaje de markup aplicado
  stock       Int
  category    String
  image       String?
  active      Boolean  @default(true)
  sales       Sale[]
  cartItems   CartItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sale {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  product    Product? @relation(fields: [productId], references: [id])
  productId  String?
  service    Service? @relation(fields: [serviceId], references: [id])
  serviceId  String?
  amount     Float
  nombre     String?
  email      String?
  telefono   String?
  direccion  String?
  metodoPago String?  @default("reembolso")
  paymentId  String?
  status     String?  @default("pending")
  createdAt  DateTime @default(now())
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  message   String
  createdAt DateTime @default(now())
}

model Cart {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String      @unique
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        String   @id @default(uuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentPreference {
  id            String   @id @default(uuid())
  preferenceId  String   @unique
  user          User?    @relation(fields: [userId], references: [id])
  userId        String?
  total         Float
  status        String   @default("pending")
  items         String
  payerInfo     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Ticket {
  id          String   @id @default(uuid())
  ticketNumber String  @unique // Número de ticket único
  nombre      String
  email       String
  telefono    String?
  // --- Campos de presupuesto ---
  empresa     String?  // Solo para presupuestos
  servicio    String?  // Solo para presupuestos
  mensaje     String?  // Solo para presupuestos
  // --- Fin campos de presupuesto ---
  tipo        String   // "presupuesto", "soporte", "contacto", "venta", "consulta"
  categoria   String   // Categoría específica del tipo
  asunto      String
  descripcion String
  urgencia    String   @default("normal") // "baja", "normal", "alta", "critica"
  estado      String   @default("abierto") // "abierto", "en_proceso", "resuelto", "cerrado"
  prioridad   String   @default("media") // "baja", "media", "alta"
  asignadoA   String?  // ID del técnico asignado
  notas       String?  // Notas internas del equipo
  resueltoEn  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TestTable {
  id String @id @default(uuid())
  name String
} 