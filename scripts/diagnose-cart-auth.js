#!/usr/bin/env node

/**
 * Script para diagnosticar problemas de autenticaci√≥n en el carrito
 * Identifica por qu√© se est√°n produciendo errores 401
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Diagn√≥stico de autenticaci√≥n del carrito...\n');

// 1. Verificar archivos de autenticaci√≥n
console.log('üìÅ 1. Verificando archivos de autenticaci√≥n...');

const authFiles = [
  'app/api/cart/route.ts',
  'app/api/auth/login/route.ts',
  'app/login/page.tsx',
  'components/CartIconWithBadge.tsx'
];

authFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`   ‚úÖ ${file} - Existe`);
  } else {
    console.log(`   ‚ùå ${file} - NO EXISTE`);
  }
});

// 2. Verificar configuraci√≥n de JWT
console.log('\nüîê 2. Verificando configuraci√≥n JWT...');

const cartRoute = fs.readFileSync('app/api/cart/route.ts', 'utf8');
const loginRoute = fs.readFileSync('app/api/auth/login/route.ts', 'utf8');

// Verificar secret key
if (cartRoute.includes('NEXTAUTH_SECRET') || cartRoute.includes('it360-secret-key-2024')) {
  console.log('   ‚úÖ Secret key configurado en cart route');
} else {
  console.log('   ‚ùå Secret key NO configurado en cart route');
}

if (loginRoute.includes('NEXTAUTH_SECRET') || loginRoute.includes('it360-secret-key-2024')) {
  console.log('   ‚úÖ Secret key configurado en login route');
} else {
  console.log('   ‚ùå Secret key NO configurado en login route');
}

// 3. Verificar manejo de tokens
console.log('\nüé´ 3. Verificando manejo de tokens...');

const cartIcon = fs.readFileSync('components/CartIconWithBadge.tsx', 'utf8');
const homePage = fs.readFileSync('app/page.tsx', 'utf8');

if (cartIcon.includes('localStorage.getItem(\'authToken\')')) {
  console.log('   ‚úÖ CartIconWithBadge obtiene token del localStorage');
} else {
  console.log('   ‚ùå CartIconWithBadge NO obtiene token del localStorage');
}

if (homePage.includes('localStorage.getItem(\'authToken\')')) {
  console.log('   ‚úÖ Home page obtiene token del localStorage');
} else {
  console.log('   ‚ùå Home page NO obtiene token del localStorage');
}

if (cartIcon.includes('Authorization: `Bearer ${token}`')) {
  console.log('   ‚úÖ CartIconWithBadge env√≠a Authorization header');
} else {
  console.log('   ‚ùå CartIconWithBadge NO env√≠a Authorization header');
}

if (homePage.includes('Authorization: `Bearer ${token}`')) {
  console.log('   ‚úÖ Home page env√≠a Authorization header');
} else {
  console.log('   ‚ùå Home page NO env√≠a Authorization header');
}

// 4. Verificar verificaci√≥n de admin en cart route
console.log('\nüë§ 4. Verificando verificaci√≥n de usuario...');

if (cartRoute.includes('getUserIdFromRequest')) {
  console.log('   ‚úÖ Funci√≥n getUserIdFromRequest implementada');
} else {
  console.log('   ‚ùå Funci√≥n getUserIdFromRequest NO implementada');
}

if (cartRoute.includes('jwt.verify')) {
  console.log('   ‚úÖ Verificaci√≥n JWT implementada');
} else {
  console.log('   ‚ùå Verificaci√≥n JWT NO implementada');
}

// 5. Verificar manejo de errores
console.log('\n‚ö†Ô∏è 5. Verificando manejo de errores...');

if (cartRoute.includes('TokenExpiredError')) {
  console.log('   ‚úÖ Manejo de token expirado implementado');
} else {
  console.log('   ‚ùå Manejo de token expirado NO implementado');
}

if (cartRoute.includes('status: 401')) {
  console.log('   ‚úÖ Respuesta 401 implementada');
} else {
  console.log('   ‚ùå Respuesta 401 NO implementada');
}

// 6. Verificar intervalos de actualizaci√≥n
console.log('\n‚è∞ 6. Verificando intervalos de actualizaci√≥n...');

if (cartIcon.includes('setInterval(updateCount, 1000)')) {
  console.log('   ‚úÖ Intervalo de actualizaci√≥n cada 1 segundo');
} else {
  console.log('   ‚ùå Intervalo de actualizaci√≥n NO configurado');
}

// 7. Posibles causas de errores 401
console.log('\nüîç 7. Posibles causas de errores 401:');
console.log('   ‚Ä¢ Token no existe en localStorage');
console.log('   ‚Ä¢ Token expirado');
console.log('   ‚Ä¢ Token malformado');
console.log('   ‚Ä¢ Secret key diferente entre login y cart');
console.log('   ‚Ä¢ Usuario eliminado de la base de datos');
console.log('   ‚Ä¢ Problemas de CORS');
console.log('   ‚Ä¢ Headers de autorizaci√≥n mal enviados');

// 8. Soluciones recomendadas
console.log('\nüí° 8. Soluciones recomendadas:');
console.log('   ‚Ä¢ Verificar que el usuario est√© logueado');
console.log('   ‚Ä¢ Limpiar localStorage y volver a loguear');
console.log('   ‚Ä¢ Verificar que el secret key sea el mismo en todas las rutas');
console.log('   ‚Ä¢ Revisar logs del servidor para m√°s detalles');
console.log('   ‚Ä¢ Probar con un usuario reci√©n creado');

console.log('\n============================================================');
console.log('üìã RESUMEN DEL DIAGN√ìSTICO');
console.log('============================================================');
console.log('üéØ Si todos los archivos existen y est√°n configurados correctamente,');
console.log('   el problema probablemente sea:');
console.log('   1. Token expirado o inv√°lido');
console.log('   2. Usuario no logueado');
console.log('   3. Diferencia en secret keys');
console.log('');
console.log('üöÄ Pr√≥ximos pasos:');
console.log('   ‚Ä¢ node scripts/test-login-cart.js - Probar login y carrito');
console.log('   ‚Ä¢ Revisar localStorage en el navegador');
console.log('   ‚Ä¢ Verificar logs del servidor Next.js'); 