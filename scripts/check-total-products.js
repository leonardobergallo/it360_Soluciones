const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function checkTotalProducts() {
  try {
    console.log('üìä Verificando total de productos en la base de datos...\n');

    // Obtener todos los productos
    const products = await prisma.product.findMany();
    
    console.log(`üéâ Total de productos en el cat√°logo: ${products.length}\n`);

    // Agrupar por categor√≠a
    const categories = {};
    products.forEach(product => {
      if (!categories[product.category]) {
        categories[product.category] = [];
      }
      categories[product.category].push(product);
    });

    console.log('üìã Resumen por categor√≠as:');
    console.log('=' .repeat(50));
    
    Object.keys(categories).sort().forEach(category => {
      const count = categories[category].length;
      const totalValue = categories[category].reduce((sum, p) => sum + p.price, 0);
      console.log(`\n${category}:`);
      console.log(`   üì¶ Cantidad: ${count} productos`);
      console.log(`   üí∞ Valor total: $${totalValue.toLocaleString()}`);
      console.log(`   üíµ Precio promedio: $${Math.round(totalValue / count).toLocaleString()}`);
      
      // Mostrar algunos productos de ejemplo
      const examples = categories[category].slice(0, 3);
      examples.forEach(product => {
        console.log(`      ‚Ä¢ ${product.name} - $${product.price.toLocaleString()}`);
      });
      
      if (count > 3) {
        console.log(`      ... y ${count - 3} productos m√°s`);
      }
    });

    // Estad√≠sticas generales
    console.log('\nüìà Estad√≠sticas generales:');
    console.log('=' .repeat(50));
    
    const totalValue = products.reduce((sum, p) => sum + p.price, 0);
    const avgPrice = totalValue / products.length;
    const minPrice = Math.min(...products.map(p => p.price));
    const maxPrice = Math.max(...products.map(p => p.price));
    
    console.log(`üí∞ Valor total del cat√°logo: $${totalValue.toLocaleString()}`);
    console.log(`üíµ Precio promedio: $${Math.round(avgPrice).toLocaleString()}`);
    console.log(`üìâ Precio m√≠nimo: $${minPrice.toLocaleString()}`);
    console.log(`üìà Precio m√°ximo: $${maxPrice.toLocaleString()}`);
    
    // Productos con im√°genes personalizadas
    const productsWithCustomImages = products.filter(p => 
      p.image && p.image.startsWith('/images/')
    );
    
    console.log(`\nüñºÔ∏è  Productos con im√°genes personalizadas: ${productsWithCustomImages.length}/${products.length}`);
    
    // Productos sin im√°genes personalizadas
    const productsWithoutCustomImages = products.filter(p => 
      !p.image || !p.image.startsWith('/images/')
    );
    
    if (productsWithoutCustomImages.length > 0) {
      console.log(`\n‚ö†Ô∏è  Productos que a√∫n necesitan im√°genes personalizadas:`);
      productsWithoutCustomImages.forEach(product => {
        console.log(`   ‚Ä¢ ${product.name} (${product.category})`);
      });
    }

    // Top 5 productos m√°s caros
    console.log('\nüèÜ Top 5 productos m√°s caros:');
    console.log('=' .repeat(50));
    
    const topExpensive = products
      .sort((a, b) => b.price - a.price)
      .slice(0, 5);
    
    topExpensive.forEach((product, index) => {
      console.log(`${index + 1}. ${product.name} - $${product.price.toLocaleString()} (${product.category})`);
    });

    // Top 5 productos m√°s baratos
    console.log('\nüíé Top 5 productos m√°s baratos:');
    console.log('=' .repeat(50));
    
    const topCheap = products
      .sort((a, b) => a.price - b.price)
      .slice(0, 5);
    
    topCheap.forEach((product, index) => {
      console.log(`${index + 1}. ${product.name} - $${product.price.toLocaleString()} (${product.category})`);
    });

    console.log('\nüéâ ¬°Cat√°logo actualizado exitosamente!');
    console.log('‚ú® Las im√°genes se han integrado correctamente en tu p√°gina web.');

  } catch (error) {
    console.error('‚ùå Error durante la verificaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script
checkTotalProducts(); 