import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';

// Cargar variables de entorno
dotenv.config({ path: '.env.local' });

const prisma = new PrismaClient();

async function debugTicket() {
  console.log('üîç Debug del ticket...\n');

  try {
    // Obtener el primer ticket de compra
    const ticket = await prisma.ticket.findFirst({
      where: {
        tipo: 'compra',
        estado: 'abierto'
      }
    });

    if (!ticket) {
      console.log('‚ùå No hay tickets de compra');
      return;
    }

    console.log(`üìã Ticket: ${ticket.ticketNumber}`);
    console.log(`üë§ Cliente: ${ticket.nombre} (${ticket.email})`);
    console.log(`üìù Descripci√≥n completa:`);
    console.log('='.repeat(50));
    console.log(ticket.descripcion);
    console.log('='.repeat(50));

    // Analizar l√≠nea por l√≠nea
    console.log('\nüîç An√°lisis l√≠nea por l√≠nea:');
    const lineas = ticket.descripcion.split('\n');
    lineas.forEach((linea, index) => {
      console.log(`${index + 1}: "${linea}"`);
    });

    // Probar extracci√≥n de productos
    console.log('\nüì¶ Productos extra√≠dos:');
    const productos = extraerProductos(ticket.descripcion);
    productos.forEach((producto, index) => {
      console.log(`${index + 1}. ${producto.nombre} - Cantidad: ${producto.cantidad}`);
    });

  } catch (error) {
    console.error('‚ùå Error:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Funci√≥n para extraer productos de la descripci√≥n
function extraerProductos(descripcion) {
  const productos = [];
  
  const lineas = descripcion.split('\n');
  lineas.forEach(linea => {
    // Buscar productos con formato "Producto x1 - $precio"
    const match = linea.match(/([^-]+)\s*x(\d+)\s*-\s*\$?([\d,]+)/i);
    if (match) {
      const nombre = match[1].trim();
      const cantidad = parseInt(match[2]);
      
      // Filtrar l√≠neas que no son productos (tel√©fono, direcci√≥n, etc.)
      if (!nombre.toLowerCase().includes('tel√©fono') && 
          !nombre.toLowerCase().includes('direcci√≥n') &&
          !nombre.toLowerCase().includes('email') &&
          !nombre.toLowerCase().includes('nombre') &&
          !nombre.toLowerCase().includes('total')) {
        productos.push({
          nombre: nombre,
          cantidad: cantidad
        });
      }
    } else {
      // Buscar productos con formato "Producto - $precio"
      const match2 = linea.match(/([^-]+)\s*-\s*\$?([\d,]+)/i);
      if (match2 && !linea.toLowerCase().includes('total')) {
        const nombre = match2[1].trim();
        
        // Filtrar l√≠neas que no son productos
        if (!nombre.toLowerCase().includes('tel√©fono') && 
            !nombre.toLowerCase().includes('direcci√≥n') &&
            !nombre.toLowerCase().includes('email') &&
            !nombre.toLowerCase().includes('nombre')) {
          productos.push({
            nombre: nombre,
            cantidad: 1
          });
        }
      }
    }
  });
  
  return productos;
}

debugTicket();
